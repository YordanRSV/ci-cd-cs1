name: Terraform and ECS Deploy

on:
  push:
    branches: [ "main" ]
    paths:
      - "terraform/**"
      - ".github/workflows/terraform-ecs.yml"
      - "**/Dockerfile"
      - "**/*.csproj"
      - "**/package.json"
      - "**/requirements.txt"
  pull_request:
    branches: [ "main" ]
    paths:
      - "terraform/**"
      - ".github/workflows/terraform-ecs.yml"

  workflow_dispatch:

permissions:
  contents: read

env:
  AWS_REGION: eu-central-1
  TF_WORKING_DIR: terraform

jobs:
  terraform:
    name: Terraform Plan/Apply
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Configure AWS credentials (access keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ github.event_name != 'push' }}
        env:
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
        run: terraform plan -input=false -no-color

      - name: Terraform Apply
        if: ${{ github.event_name == 'push' }}
        env:
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
        run: terraform apply -input=false -auto-approve

  build_and_deploy:
    name: Build, Push Image, and Update ECS
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (access keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Initialize Terraform to read outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Extract ECR and ECS outputs
        id: tf
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform output -json > outputs.json
          echo "ecr_url=$(jq -r .ecr_repository_url.value outputs.json)" >> $GITHUB_OUTPUT
          echo "cluster=$(jq -r .ecs_cluster_name.value outputs.json)" >> $GITHUB_OUTPUT
          echo "service=$(jq -r .ecs_service_name.value outputs.json)" >> $GITHUB_OUTPUT
          echo "alb=$(jq -r .alb_dns_name.value outputs.json)" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.tf.outputs.ecr_url }}
        run: |
          IMAGE_TAG=latest
          docker build -t $ECR_REGISTRY:$IMAGE_TAG .
          docker push $ECR_REGISTRY:$IMAGE_TAG

      - name: Force new ECS deployment
        env:
          CLUSTER: ${{ steps.tf.outputs.cluster }}
          SERVICE: ${{ steps.tf.outputs.service }}
        run: |
          aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --force-new-deployment >/dev/null

      - name: Show ALB URL
        run: |
          echo "ALB DNS: ${{ steps.tf.outputs.alb }}" 